Seu aplicativo (web) deve fornecer detalhes sobre os dados de incid√™ncia de COVID para um determinado pa√≠s/territ√≥rio. Voc√™ deve considerar pelo menos o n√∫mero de (novos) casos para um dia ou per√≠odo, mas pode adicionar mais dados (por exemplo: agrega√ß√£o de dados). Varia√ß√µes sobre o tema s√£o aceit√°veis ‚Äã‚Äãe bem-vindas, se relacionadas √† vigil√¢ncia em sa√∫de p√∫blica.

O projeto deve incluir diferentes componentes (Figura 1):
1. Um aplicativo web, minimalista, que permite aos usu√°rios entrar ou selecionar uma regi√£o/pa√≠s e acessar suas m√©tricas Covid, por exemplo: √∫ltimos 3 dias.
2. Integra√ß√£o com fonte(s) externa(s). Os dados reais devem ser recuperados de um servi√ßo remoto. Seus servi√ßos de back-end funcionar√£o como um cliente para uma API1 de terceiros, que voc√™ acessar√° para obter os valores necess√°rios.

3. Implemente um cache2 para reduzir o n√∫mero de acessos externos. Sempre que uma solicita√ß√£o √© feita a uma API remota, voc√™ deve armazenar em cache os resultados; 
se os mesmos dados (remotos) forem solicitados (ou seja, uma solicita√ß√£o duplicada), voc√™ dever√° usar os valores armazenados em cache.
O cache deve definir uma pol√≠tica de tempo de vida e produzir algumas estat√≠sticas b√°sicas sobre sua opera√ß√£o (contagem de solicita√ß√µes, acertos/erros).
Todos os dados relacionados √†s opera√ß√µes de cache n√£o precisam ser persistidos [voc√™ pode usar uma estrutura de dados de mem√≥ria, como um HashMap].

4. Forne√ßa sua pr√≥pria API REST para expor dados de monitoramento COVID a serem invocados por clientes externos.
Sua API deve permitir interrogar programaticamente (seu) back-end para dados √∫teis de rastreamento de covid (por exemplo: filtragem por regi√£o, por dias,...).
Sua API tamb√©m deve fornecer um endpoint para obter estat√≠sticas b√°sicas sobre o uso do cache (interno).

5. Use uma estrat√©gia de registro para produzir evid√™ncias √∫teis das a√ß√µes/eventos que ocorreram durante o uso do software,
para posterior inspe√ß√£o/depura√ß√£o. Certifique-se de aplicar uma biblioteca de log padr√£o.

Cache
->armazenar dados com tempo de vida para dps n fazer outra vez o pedido √† API
->estatisticas da cache 
->hashmap

Testes para implementar

O projeto deve incluir a automa√ß√£o de diferentes tipos de testes:
A) Testes unit√°rios (sugest√£o: testes de comportamento do cache; testes de "valida√ß√£o de dados", "conversores" ou "utils" em geral, se for o caso).
B) Testes de n√≠vel de servi√ßo, com isolamento de depend√™ncia usando mocks (sugest√£o: teste seus servi√ßos de forma isolada do provedor de dados externo).
C) Testes de integra√ß√£o em sua API (sugest√£o Spring Boot MockMvc e/ou REST-Assured).
D) Testes funcionais (na interface web). Certifique-se de adotar uma abordagem orientada por comportamento (recursos com cen√°rios).

Um breve Relat√≥rio T√©cnico deve explicar a estrat√©gia adotada (suas op√ß√µes como desenvolvedor) e oferecer evid√™ncias dos resultados obtidos
(por exemplo: quais testes por n√≠vel de teste, capturas de tela das etapas representativas, (pequenos) trechos de c√≥digo das partes principais,
capturas de tela com os resultados do teste, etc.). Os resultados do painel do Sonar Qube devem ser inclu√≠dos (e discutidos). [Um modelo de relat√≥rio ser√° fornecido.]
1. O projeto de c√≥digo, confirmado em seu reposit√≥rio Git pessoal do TQS (pasta /HW1).
Al√©m do c√≥digo, certifique-se de incluir no reposit√≥rio um pequeno v√≠deo com uma demonstra√ß√£o de sua solu√ß√£o (ou um link para o v√≠deo, se o v√≠deo for um arquivo grande).

Overview
<apresente brevemente sua aplica√ß√£o: d√™ um nome ao produto, se for o caso; qual √© a sua finalidade?>

ES

Current limitations
<explique as limita√ß√µes conhecidas ü°™ recursos n√£o implementados ou defeituosos (mas esperados)>

<descri√ß√£o funcional do aplicativo: quem (atores) usar√° o aplicativo e para qu√™? Explique brevemente os principais cen√°rios de uso. >